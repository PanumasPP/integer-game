<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‡πÄ‡∏Å‡∏°‡∏ô‡∏±‡∏Å‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏õ.2)</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@400;600&display=swap" rel="stylesheet">
    
    <style>
        /* CSS ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á */
        :root {
            --primary-color: #007bff; --success-color: #28a745;
            --warning-color: #ffc107; --danger-color: #dc3545;
            --light-bg: #f8f9fa; --xp-color: #33aadd; --locked-color: #999;
        }
        body {
            font-family: 'Kanit', sans-serif; margin: 0; padding: 0;
            background: #f0f2f5; color: #333;
            display: flex; justify-content: center; align-items: center; min-height: 100vh;
        }
        #game-container {
            width: 90%; max-width: 800px; height: 600px;
            background: #fff; border-radius: 20px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            position: relative; overflow: hidden;
        }
        .screen {
            position: absolute; top: 0; left: 0;
            width: 100%; height: 100%;
            display: none; flex-direction: column;
            justify-content: center; align-items: center;
            text-align: center; padding: 20px; box-sizing: border-box;
            transition: opacity 0.5s ease-in-out; opacity: 0;
        }
        .screen.active { display: flex; opacity: 1; }
        .screen-content-wrapper {
             display: flex; flex-direction: column; align-items: center;
             justify-content: center; width: 100%; height: 100%;
        }
        #welcome-screen {
            background-image: url('https://i.imgur.com/gKqY4SM.jpeg');
            background-size: cover; background-position: center; color: white;
        }
        #welcome-screen .screen-content-wrapper {
            background-color: rgba(0, 0, 0, 0.65); padding: 30px; border-radius: 15px;
        }
        h1 { font-size: 2.5em; text-shadow: 2px 2px 4px #000; }
        h2 { font-size: 2.2em; }
        h3 { font-size: 1.8em; margin-bottom: 20px;}
        .developer-name { font-size: 1.2em; margin-top: -10px; margin-bottom: 30px; }
        .btn {
            background-color: var(--success-color); color: white; border: none;
            padding: 15px 30px; text-align: center; font-size: 1.2em;
            font-family: 'Kanit', sans-serif; margin: 10px 5px;
            cursor: pointer; border-radius: 12px;
            transition: background-color 0.3s, transform 0.2s;
            width: 80%; max-width: 350px;
        }
        .btn:hover { transform: scale(1.05); }
        .btn:disabled, .btn.locked {
            background-color: var(--locked-color); cursor: not-allowed; transform: scale(1);
        }
        .btn.locked::after { content: ' üîí'; }
        .mode-btn { background-color: var(--primary-color); }
        .back-btn { background-color:#6c757d; margin-top: 20px; }
        #player-stats-container {
            position: absolute; top: 15px; right: 20px; display: flex;
            align-items: center; gap: 20px; background-color: rgba(255, 255, 255, 0.8);
            padding: 5px 15px; border-radius: 20px; z-index: 10;
        }
        .stat-item { font-size: 1.2em; font-weight: 600; }
        #xp-bar-container {
            width: 100px; height: 15px; background-color: #e0e0e0;
            border-radius: 10px; overflow: hidden; border: 1px solid #ccc;
        }
        #xp-bar-fill {
            width: 0%; height: 100%; background-color: var(--xp-color);
            transition: width 0.5s ease-in-out;
        }
        #level-up-toast {
            position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);
            background-color: var(--warning-color); color: white;
            padding: 20px 40px; border-radius: 15px; font-size: 2em; font-weight: bold;
            z-index: 100; transition: opacity 0.5s;
        }
        .game-header {
            position: absolute; top: 20px; width: 90%;
            display: flex; justify-content: space-between;
            font-size: 1.2em; font-weight: 600;
        }
        #timer { color: var(--danger-color); font-size: 1.5em; }
        #combo-display {
            position: absolute; bottom: 100px; left: 50%; transform: translateX(-50%);
            font-size: 1.5em; font-weight: bold; color: var(--warning-color);
            animation: fadeInOut 2s forwards;
        }
        @keyframes fadeInOut {
            0%, 100% { opacity: 0; transform: translate(-50%, 20px); }
            10%, 90% { opacity: 1; transform: translate(-50%, 0); }
        }
        #question-box {
            display: flex; gap: 15px; margin: 20px 0;
            justify-content: center; align-items: center; height: 110px;
        }
        .number-card, .input-card {
            width: 80px; height: 100px; display: flex;
            justify-content: center; align-items: center;
            font-size: 2.5em; font-weight: 600; border-radius: 10px;
        }
        .number-card { background-color: #e9ecef; border: 2px solid #ced4da; }
        .input-card {
            font-family: 'Kanit', sans-serif; text-align: center;
            border: 2px dashed var(--primary-color); background-color: #fff;
        }
        #difficulty-selection, #learning-difficulty-container {
            display: flex; flex-direction: column; align-items: center; width: 100%;
        }
        #difficulty-buttons, #learning-difficulty-buttons {
            display: flex; flex-direction: column; align-items: center; width: 100%;
        }
        #learning-content-container {
            position: absolute; top: 0; left: 0; width: 100%; height: 100%;
            background-color: rgba(0, 0, 0, 0.75);
            display: flex; justify-content: center; align-items: center;
            z-index: 20;
        }
        .learning-box {
            background-color: #ffffff; padding: 40px; border-radius: 15px;
            width: 80%; max-width: 500px; text-align: center;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }
        #lesson-selection-container {
            width:100%; flex-grow:1; display:flex; flex-direction:column;
        }
        #lesson-buttons-container {
            flex-grow: 1; overflow-y: auto; padding: 10px;
            display: flex; flex-wrap: wrap; justify-content: center;
            gap: 10px;
        }
        .lesson-btn {
            width: calc(50% - 20px); max-width: 200px; padding: 15px 10px;
            font-size: 1.1em; background-color: #5bc0de;
        }
        #confetti-canvas {
            position: absolute; top: 0; left: 0; width: 100%; height: 100%;
            pointer-events: none; z-index: 100;
        }
        #sound-toggle {
            position: absolute; top: 15px; left: 20px;
            font-size: 2em; cursor: pointer; z-index: 10;
        }
        .hidden { display: none !important; }
    </style>
</head>
<body>

    <div id="game-container">
    
        <div id="player-stats-container">
            <div id="level-display" class="stat-item">Lv. 1</div>
            <div id="xp-bar-container"><div id="xp-bar-fill"></div></div>
            <div id="star-display" class="stat-item">‚≠ê 0</div>
        </div>
        <div id="sound-toggle">üîà</div>
        <div id="level-up-toast" class="hidden">‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏≠‡∏±‡∏õ!</div>
        <canvas id="confetti-canvas"></canvas>

        <div id="welcome-screen" class="screen active">
            <div class="screen-content-wrapper">
                <h1>‡πÄ‡∏Å‡∏°‡∏ô‡∏±‡∏Å‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏õ.2)</h1>
                <p class="developer-name">‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢: ‡∏ô‡∏≤‡∏¢‡∏†‡∏≤‡∏ì‡∏∏‡∏°‡∏≤‡∏® ‡πÅ‡∏õ‡πâ‡∏ô‡πÄ‡∏î‡∏ä<br>‡∏Ñ‡∏£‡∏π‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏ß‡∏ô‡∏õ‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏ñ‡∏±‡∏°‡∏†‡πå</p>
                <button id="start-game-btn" class="btn">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÄ‡∏Å‡∏°</button>
            </div>
        </div>

        <div id="mode-selection-screen" class="screen">
            <div class="screen-content-wrapper">
                <div id="main-mode-selection" class="screen-content-wrapper">
                    <h2>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô</h2>
                    <button class="btn mode-btn" data-mode="learning">‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ üß†</button>
                    <button class="btn mode-btn" data-mode="self_development">‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏ô‡πÄ‡∏≠‡∏á üí™</button>
                    <button class="btn mode-btn" data-mode="challenge">‡πÇ‡∏´‡∏°‡∏î‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢ üèÜ</button>
                    <button id="achievements-btn" class="btn" style="background-color:#5bc0de;">‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</button>
                </div>
                <div id="difficulty-selection" class="hidden">
                     <h3>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å</h3>
                     <div id="difficulty-buttons"></div>
                     <button id="back-to-mode-btn" class="btn back-btn">‡∏Å‡∏•‡∏±‡∏ö</button>
                </div>
            </div>
        </div>

        <div id="lesson-selection-screen" class="screen">
            <div class="screen-content-wrapper">
                <div id="lesson-selection-container" class="screen-content-wrapper">
                    <h2>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h2>
                    <div id="lesson-buttons-container"></div>
                    <button id="back-to-main-menu-btn" class="btn back-btn">‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î</button>
                </div>
                <div id="learning-difficulty-container" class="hidden">
                    <h3>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å</h3>
                    <div id="learning-difficulty-buttons"></div>
                    <button id="back-to-lesson-btn" class="btn back-btn">‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</button>
                </div>
            </div>
        </div>
        
        <div id="game-play-screen" class="screen">
            <div id="quiz-content-container" class="screen-content-wrapper">
                 <div class="game-header">
                    <span id="question-counter"></span>
                    <div id="timer"></div>
                    <span id="score-counter"></span>
                </div>
                <div id="game-content">
                    <p id="hint-text" class="hint"></p>
                    <div id="question-box"></div>
                    <button id="submit-answer-btn" class="btn">‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö</button>
                     <div id="feedback-text"></div>
                </div>
                 <div id="combo-display-container"></div>
            </div>

            <div id="learning-content-container" class="hidden">
                <div class="learning-box">
                    <div id="learning-content"></div>
                    <button id="next-learning-btn" class="btn">‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö!</button>
                </div>
            </div>
            </div>

        <div id="summary-screen" class="screen">
            <div class="screen-content-wrapper">
                <h2>‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô</h2>
                <h3 id="final-score"></h3>
                <div id="summary-details"></div>
                <button id="summary-back-btn" class="btn">‡∏Å‡∏•‡∏±‡∏ö</button>
            </div>
        </div>
        
        <div id="achievements-screen" class="screen">
            <div class="screen-content-wrapper">
                <h2>‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</h2>
                <p>‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ!</p>
                <button id="back-from-achievements-btn" class="btn back-btn">‡∏Å‡∏•‡∏±‡∏ö</button>
            </div>
        </div>

    </div>

    <script>
    document.addEventListener('DOMContentLoaded', () => {

        const el = {
            screens: document.querySelectorAll('.screen'),
            startGameBtn: document.getElementById('start-game-btn'),
            modeButtons: document.querySelectorAll('.mode-btn'),
            mainModeSelection: document.getElementById('main-mode-selection'),
            difficultySelection: document.getElementById('difficulty-selection'),
            difficultyButtonsContainer: document.getElementById('difficulty-buttons'),
            backToModeBtn: document.getElementById('back-to-mode-btn'),
            achievementsBtn: document.getElementById('achievements-btn'),
            backFromAchievementsBtn: document.getElementById('back-from-achievements-btn'),
            lessonSelectionContainer: document.getElementById('lesson-selection-container'),
            lessonButtonsContainer: document.getElementById('lesson-buttons-container'),
            backToMainMenuBtn: document.getElementById('back-to-main-menu-btn'),
            learningDifficultyContainer: document.getElementById('learning-difficulty-container'),
            learningDifficultyButtons: document.getElementById('learning-difficulty-buttons'),
            backToLessonBtn: document.getElementById('back-to-lesson-btn'),
            learningContentContainer: document.getElementById('learning-content-container'),
            learningContent: document.getElementById('learning-content'),
            nextLearningBtn: document.getElementById('next-learning-btn'),
            questionCounter: document.getElementById('question-counter'),
            scoreCounter: document.getElementById('score-counter'),
            hintText: document.getElementById('hint-text'),
            questionBox: document.getElementById('question-box'),
            submitAnswerBtn: document.getElementById('submit-answer-btn'),
            feedbackText: document.getElementById('feedback-text'),
            summaryBackBtn: document.getElementById('summary-back-btn'),
            finalScore: document.getElementById('final-score'),
            summaryDetails: document.getElementById('summary-details'),
            playerStatsContainer: document.getElementById('player-stats-container'),
            levelDisplay: document.getElementById('level-display'),
            xpBarFill: document.getElementById('xp-bar-fill'),
            starDisplay: document.getElementById('star-display'),
            levelUpToast: document.getElementById('level-up-toast'),
            timerDisplay: document.getElementById('timer'),
            comboDisplayContainer: document.getElementById('combo-display-container'),
            confettiCanvas: document.getElementById('confetti-canvas'),
            soundToggle: document.getElementById('sound-toggle'),
        };
        
        let currentMode = '', currentDifficulty = '', currentQuestionIndex = 0, score = 0;
        let questions = [], playerResults = [], chosenLearningStep = 0;
        let timer, timeLeft = 0, comboCounter = 0, isMuted = false;
        const XP_PER_LEVEL = 100;
        
        // --- MODIFIED FOR GRADE 2 ---
        // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞ 2 ‡πÅ‡∏•‡∏∞ 5
        const learningSteps = [2, 5];
        
        let playerData = {
            xp: 0, level: 1, stars: 0,
            unlockedModes: ['learning', 'self_development'],
            achievements: [], gamesPlayed: 0
        };

        const sounds = {
            correct: new Audio('https://cdn.pixabay.com/audio/2022/03/15/audio_2b089b0e69.mp3'),
            wrong: new Audio('https://cdn.pixabay.com/audio/2022/03/10/audio_c3ff08ed96.mp3'),
            click: new Audio('https://cdn.pixabay.com/audio/2022/11/17/audio_88f1159c65.mp3')
        };

        function playSound(soundId) {
            if (!isMuted && sounds[soundId]) {
                sounds[soundId].currentTime = 0;
                sounds[soundId].play().catch(e => {});
            }
        }
        
        function savePlayerData() { localStorage.setItem('codebreakerPlayerData', JSON.stringify(playerData)); }
        function loadPlayerData() {
            const savedData = localStorage.getItem('codebreakerPlayerData');
            if (savedData) playerData = JSON.parse(savedData);
            updateUI();
        }
        
        function showScreen(screenId) {
            el.screens.forEach(screen => screen.classList.remove('active'));
            document.getElementById(screenId).classList.add('active');
            el.playerStatsContainer.style.display = (screenId === 'welcome-screen') ? 'none' : 'flex';
        }
        
        function resetGame(isFullReset = true) {
            currentQuestionIndex = 0; score = 0; questions = []; playerResults = []; comboCounter = 0;
            el.feedbackText.textContent = '';
            stopTimer();
            if (isFullReset) {
                el.difficultySelection.classList.add('hidden');
                el.mainModeSelection.classList.remove('hidden');
            }
        }
        
        function updateUI() {
            el.levelDisplay.textContent = `Lv. ${playerData.level}`;
            el.starDisplay.textContent = `‚≠ê ${playerData.stars}`;
            const xpForCurrentLevel = playerData.xp - ((playerData.level - 1) * XP_PER_LEVEL);
            el.xpBarFill.style.width = `${(xpForCurrentLevel / XP_PER_LEVEL) * 100}%`;
            el.modeButtons.forEach(btn => {
                const mode = btn.dataset.mode;
                btn.disabled = !playerData.unlockedModes.includes(mode);
                btn.classList.toggle('locked', !playerData.unlockedModes.includes(mode));
            });
        }
        
        function gainXP(amount) {
            playerData.xp += amount;
            const newLevel = Math.floor(playerData.xp / XP_PER_LEVEL) + 1;
            if (newLevel > playerData.level) {
                playerData.level = newLevel;
                el.levelUpToast.classList.remove('hidden');
                setTimeout(() => el.levelUpToast.classList.add('hidden'), 2000);
            }
            updateUI();
            savePlayerData();
        }

        function handleModeSelection(mode) {
            if (mode === 'learning') { showLessonSelection(); return; }
            el.mainModeSelection.classList.add('hidden');
            el.difficultySelection.classList.remove('hidden');
            el.difficultyButtonsContainer.innerHTML = '';
            const difficulties = (mode === 'self_development') 
                ? [{ id: 'easy', text: '‡∏á‡πà‡∏≤‡∏¢ ‚ú®' }, { id: 'medium', text: '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‚≠ê' }, { id: 'hard', text: '‡∏¢‡∏≤‡∏Å üî•' }]
                : [{ id: 'easy', text: '‡∏á‡πà‡∏≤‡∏¢' }, { id: 'medium', text: '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á' }, { id: 'hard', text: '‡∏¢‡∏≤‡∏Å' }, { id: 'master', 'text': '‡∏¢‡∏≠‡∏î‡∏ô‡∏±‡∏Å‡πÑ‡∏Ç‡∏£‡∏´‡∏±‡∏™ üëë' }];
            difficulties.forEach(diff => {
                const btn = document.createElement('button');
                btn.className = 'btn';
                btn.innerHTML = diff.text;
                btn.onclick = () => { playSound('click'); currentDifficulty = diff.id; startGame(); };
                el.difficultyButtonsContainer.appendChild(btn);
            });
        }
        
        function showLessonSelection() {
            el.lessonSelectionContainer.classList.remove('hidden');
            el.learningDifficultyContainer.classList.add('hidden');
            el.lessonButtonsContainer.innerHTML = '';
            learningSteps.forEach(step => {
                const btn = document.createElement('button');
                btn.className = 'btn lesson-btn';
                btn.textContent = `‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞ ${step}`;
                btn.onclick = () => { playSound('click'); chosenLearningStep = step; showLearningDifficultySelection(); };
                el.lessonButtonsContainer.appendChild(btn);
            });
            showScreen('lesson-selection-screen');
        }

        function showLearningDifficultySelection() {
            el.lessonSelectionContainer.classList.add('hidden');
            el.learningDifficultyContainer.classList.remove('hidden');
            const difficulties = [{ id: 'easy', text: '‡∏á‡πà‡∏≤‡∏¢ (‡πÄ‡∏•‡∏Ç‡∏ô‡πâ‡∏≠‡∏¢)' }, { id: 'medium', text: '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (‡πÄ‡∏•‡∏Ç‡∏°‡∏≤‡∏Å)' }];
            el.learningDifficultyButtons.innerHTML = '';
            difficulties.forEach(diff => {
                const btn = document.createElement('button');
                btn.className = 'btn';
                btn.innerHTML = diff.text;
                btn.onclick = () => { playSound('click'); currentDifficulty = diff.id; startGame(); };
                el.learningDifficultyButtons.appendChild(btn);
            });
        }
        
        function startGame() {
            resetGame(false);
            showScreen('game-play-screen');
            if (currentMode === 'learning') {
                startLearningPhase();
            } else {
                questions = generateQuestions();
                displayQuestion();
            }
        }
        
        function startLearningPhase() {
            el.learningContentContainer.classList.remove('hidden');
            el.learningContent.innerHTML = `<h2>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ: ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞ ${chosenLearningStep}</h2><p>‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ö‡∏ß‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô <b>${chosenLearningStep}</b> ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ñ‡∏±‡∏î‡πÑ‡∏õ</p><p>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 5 ‚Üí <b>${5 + chosenLearningStep}</b> ‚Üí ${5 + chosenLearningStep * 2}</p>`;
        }

        function displayQuestion() {
            const totalQuestions = (currentMode === 'learning') ? 3 : 10;
            if (currentQuestionIndex >= totalQuestions) { showSummary(totalQuestions); return; }
            
            const q = questions[currentQuestionIndex];
            el.questionCounter.textContent = `‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà ${currentQuestionIndex + 1}/${totalQuestions}`;
            el.scoreCounter.textContent = `‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${score}`;
            el.hintText.innerHTML = q.hint || '';
            el.feedbackText.textContent = '';
            el.submitAnswerBtn.disabled = false;
            el.questionBox.innerHTML = '';
            
            q.display.forEach(item => {
                const card = (item === '__') ? document.createElement('input') : document.createElement('div');
                card.className = (item === '__') ? 'input-card' : 'number-card';
                if (item === '__') { card.type = 'number'; } 
                else { card.textContent = item; }
                el.questionBox.appendChild(card);
            });
            
            if (currentMode === 'challenge') startTimer(15);
            else el.timerDisplay.textContent = '';
        }

        function checkAnswer() {
            stopTimer();
            const inputs = document.querySelectorAll('#question-box .input-card');
            const playerAnswer = Array.from(inputs).map(input => parseInt(input.value, 10));
            if (playerAnswer.some(isNaN)) {
                el.feedbackText.textContent = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á";
                el.feedbackText.className = 'incorrect'; return;
            }
            const currentQuestion = questions[currentQuestionIndex];
            const isCorrect = JSON.stringify(playerAnswer) === JSON.stringify(currentQuestion.answer);
            if (isCorrect) {
                playSound('correct');
                el.feedbackText.textContent = '‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡∏ö! üéâ';
                el.feedbackText.className = 'correct';
                score++; comboCounter++;
                let xpGained = 10;
                if (comboCounter >= 2) {
                    const comboBonus = 5 * (comboCounter - 1);
                    xpGained += comboBonus;
                    const comboDiv = document.createElement('div');
                    comboDiv.id = 'combo-display';
                    comboDiv.textContent = `‡∏Ñ‡∏≠‡∏°‡πÇ‡∏ö x${comboCounter}! +${comboBonus} XP üî•`;
                    el.comboDisplayContainer.innerHTML = '';
                    el.comboDisplayContainer.appendChild(comboDiv);
                }
                gainXP(xpGained);
                playerData.stars++;
            } else {
                playSound('wrong');
                el.feedbackText.textContent = '‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ô‡∏∞ ü§î';
                el.feedbackText.className = 'incorrect';
                comboCounter = 0;
            }
            playerResults.push({ question: currentQuestion, playerAnswer, isCorrect });
            el.submitAnswerBtn.disabled = true;
            setTimeout(() => { currentQuestionIndex++; displayQuestion(); }, 1500);
        }
        
        function showSummary(totalQuestions) {
            stopTimer();
            playerData.gamesPlayed++;
            if (currentMode === 'self_development' && !playerData.unlockedModes.includes('challenge')) {
                playerData.unlockedModes.push('challenge');
                setTimeout(() => alert("‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß!"), 500);
            }
            savePlayerData();
            updateUI();
            el.finalScore.textContent = `‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏î‡πâ ${score} ‡∏à‡∏≤‡∏Å ${totalQuestions} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô`;
            el.summaryDetails.innerHTML = '';
            if (score / totalQuestions >= 0.8 && score > 0) launchConfetti();
            const incorrectAnswers = playerResults.filter(r => !r.isCorrect);
            if (incorrectAnswers.length === 0) {
                el.summaryDetails.innerHTML = '<p style="text-align:center; font-weight:600;">‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠ üèÜ</p>';
            } else {
                incorrectAnswers.forEach(result => {
                     const item = document.createElement('div');
                    item.className = 'summary-item';
                    item.innerHTML = `<p class="summary-question">‡πÇ‡∏à‡∏ó‡∏¢‡πå: ${result.question.display.join(' ')}</p><p>‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: <span class="incorrect">${result.playerAnswer.join(', ')}</span></p><p>‡πÄ‡∏â‡∏•‡∏¢: <span class="correct">${result.question.answer.join(', ')}</span> (<b>${result.question.hint.replace('?', '')}</b>)</p>`;
                    el.summaryDetails.appendChild(item);
                });
            }
            el.summaryBackBtn.textContent = (currentMode === 'learning') ? '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏∑‡πà‡∏ô' : '‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î';
            showScreen('summary-screen');
        }

        function setupEventListeners() {
            el.startGameBtn.onclick = () => { playSound('click'); showScreen('mode-selection-screen'); };
            el.achievementsBtn.onclick = () => { playSound('click'); showScreen('achievements-screen'); };
            el.backFromAchievementsBtn.onclick = () => { playSound('click'); showScreen('mode-selection-screen'); };
            el.backToModeBtn.onclick = () => { playSound('click'); el.difficultySelection.classList.add('hidden'); el.mainModeSelection.classList.remove('hidden'); };
            el.backToMainMenuBtn.onclick = () => { playSound('click'); showScreen('mode-selection-screen'); };
            el.backToLessonBtn.onclick = () => { playSound('click'); el.learningDifficultyContainer.classList.add('hidden'); el.lessonSelectionContainer.classList.remove('hidden'); };
            el.nextLearningBtn.onclick = () => { playSound('click'); el.learningContentContainer.classList.add('hidden'); questions = generateQuestions(); displayQuestion(); };
            el.submitAnswerBtn.onclick = () => { checkAnswer(); };
            el.soundToggle.onclick = () => { isMuted = !isMuted; el.soundToggle.textContent = isMuted ? 'üîá' : 'üîà'; };
            el.summaryBackBtn.onclick = () => {
                playSound('click');
                if(currentMode === 'learning') showLessonSelection();
                else { resetGame(true); showScreen('mode-selection-screen'); }
            };
            el.modeButtons.forEach(button => {
                button.onclick = () => {
                    if (button.disabled) return;
                    playSound('click');
                    currentMode = button.dataset.mode;
                    handleModeSelection(currentMode);
                };
            });
        }
        
        function startTimer(duration) {
            timeLeft = duration; el.timerDisplay.textContent = timeLeft;
            timer = setInterval(() => {
                timeLeft--; el.timerDisplay.textContent = timeLeft;
                if (timeLeft <= 0) { stopTimer(); el.feedbackText.textContent = "‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤! ‚åõ"; el.feedbackText.className = 'incorrect'; checkAnswer(); }
            }, 1000);
        }
        function stopTimer() { clearInterval(timer); }
        function generateQuestions() {
            const total = (currentMode === 'learning') ? 3 : 10;
            return Array.from({length: total}, () => createSingleQuestion());
        }

        // --- MODIFIED FOR GRADE 2 ---
        function createSingleQuestion() {
            let start, step, sequence, display, answer, hint;
            const possibleSteps = [2, 5]; // ‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡πÅ‡∏Ñ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞ 2 ‡∏´‡∏£‡∏∑‡∏≠ 5

            if (currentMode === 'learning') {
                step = chosenLearningStep; // ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (2 ‡∏´‡∏£‡∏∑‡∏≠ 5)
                if (currentDifficulty === 'easy') start = randomInt(1, 20);
                else if (currentDifficulty === 'medium') start = randomInt(20, 50);
                
                sequence = generateSequence(start, step);
                display = [sequence[0], sequence[1], sequence[2], '__'];
                answer = [sequence[3]];
                hint = `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞ ${step}`;

            } else if (currentMode === 'self_development') {
                step = possibleSteps[Math.floor(Math.random() * possibleSteps.length)]; // ‡∏™‡∏∏‡πà‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 2 ‡∏Å‡∏±‡∏ö 5
                
                if (currentDifficulty === 'easy') { start = randomInt(1, 20); }
                else if (currentDifficulty === 'medium') { start = randomInt(1, 50); }
                else { start = randomInt(10, 100); }

                hint = `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞ ${step}`;
                sequence = generateSequence(start, step);
                display = (currentDifficulty === 'easy') ? [sequence[0], sequence[1], sequence[2], '__'] : [sequence[0], sequence[1], '__', '__'];
                answer = (currentDifficulty === 'easy') ? [sequence[3]] : [sequence[2], sequence[3]];

            } else if (currentMode === 'challenge') {
                step = possibleSteps[Math.floor(Math.random() * possibleSteps.length)]; // ‡∏™‡∏∏‡πà‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 2 ‡∏Å‡∏±‡∏ö 5
                
                if (currentDifficulty === 'easy' || currentDifficulty === 'medium') { start = randomInt(1, 50); }
                else { start = randomInt(10, 100); }
                
                sequence = generateSequence(start, step);
                hint = `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞ ?`; // ‡πÇ‡∏´‡∏°‡∏î‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢‡∏à‡∏∞‡∏¢‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤ step
                
                display = ['__', '__', '__', '__'];
                let indicesToShow = [];
                if (currentDifficulty === 'easy' || currentDifficulty === 'medium') { while(indicesToShow.length < 2) { let r = randomInt(0, 3); if(!indicesToShow.includes(r)) indicesToShow.push(r); } }
                else if (currentDifficulty === 'hard') { let startIdx = randomInt(0, 2); indicesToShow = [startIdx, startIdx + 1]; }
                else { let idx1 = randomInt(0, 3), idx2; do { idx2 = randomInt(0, 3); } while (Math.abs(idx1 - idx2) < 2); indicesToShow = [idx1, idx2]; }
                
                indicesToShow.forEach(idx => display[idx] = sequence[idx]);
                answer = sequence.filter((val, idx) => !indicesToShow.includes(idx));
            }
            return { display, answer, hint };
        }
        const generateSequence = (start, step, length = 4) => Array.from({ length }, (_, i) => start + i * step);
        const randomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;

        function launchConfetti() {
            const canvas = el.confettiCanvas;
            const ctx = canvas.getContext('2d');
            canvas.width = canvas.clientWidth;
            canvas.height = canvas.clientHeight;
            let particles = [];
            for (let i = 0; i < 150; i++) {
                particles.push({
                    x: Math.random() * canvas.width, y: Math.random() * canvas.height - canvas.height,
                    size: randomInt(2, 6),
                    speedX: randomInt(-3, 3), speedY: randomInt(2, 5),
                    color: `hsl(${randomInt(0, 360)}, 100%, 70%)`,
                    opacity: 1
                });
            }
            function animate() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                particles.forEach((p, index) => {
                    p.x += p.speedX; p.y += p.speedY; p.opacity -= 0.01;
                    ctx.globalAlpha = p.opacity;
                    ctx.fillStyle = p.color;
                    ctx.beginPath(); ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2); ctx.fill();
                    if (p.opacity <= 0) particles.splice(index, 1);
                });
                if (particles.length > 0) requestAnimationFrame(animate);
                else ctx.clearRect(0, 0, canvas.width, canvas.height);
            }
            animate();
        }
        
        setupEventListeners();
        loadPlayerData();
    });
    </script>

</body>
</html>.